c
options['authorize_url']
options[:authorize_url]
options[:authorize_url)
options
connection.post('http://testcloud.ru', {})
connection
@options
params
opts
opt
sign.values.join
z.values.join
sign = signature_params.merge(params)
    def signature_params
      {
        'client_id' => '',
        'scope' => '',
        'timestamp' => Time.current.strftime('%Y.%m.%d %H:%M:%S %z'),
        'state' => '',
        'redirect_uri' => ''
      }
    end
Time.current.strftime('%Y.%m.%d %H:%M:%S %z')
Time.current
Time.current.strftime('%Y.%m.%d %H:%M:%S ')
Time.current.strftime('%Y.%m.%d %H:%M:%S %Z')
Time.current.strftime('%Y.%m.%d %H:%M:%S Z')
Time.current.strftime('%Y.%m.%d %H:%M:ss Z')
Time.current.strftime('%Y.%m.%d %H:mm:ss Z')
Time.current.strftime('%Y.%m.%d %h:mm:ss Z')
Time.current.strftime('%Y.%m.%d h:mm:ss Z')
Time.current.strftime('%Y.%m.%d HH:mm:ss Z')
Time.current.strftime('%Y.%M.%d HH:mm:ss Z')
Time.current.strftime('%y.%M.%d HH:mm:ss Z')
Time.current.strftime('%y.%M.%dd HH:mm:ss Z')
Time.current.strftime('yyyy.MM.dd HH:mm:ss Z')
Time.current.to_s
Time.current
res.values.join
res.keys.join
res.keys
res.join
res.to_s
res
res = signature_params.merge(params)
signature_params.merge(params)
    def signature_params
      {
        'client_id' => '',
        'scope' => '',
        'timestamp' => Time.current,
        'state' => '',
        'redirect_uri' => ''
      }
    end
signature_params.merge(params)
    def signature_params
      {
        client_id: '',
        scope: '',
        timestamp: Time.current,
        state: '',
        redirect_uri: ''
      }
    end
Time.current
test.merge(b: 5)
test = {a: 1, b: 2, c: 3}
params
redirection_params
params
redirection_params
c
params = (params || {}).merge(redirection_params)
c
OAuth2::EsiaClient
OAuth2
l-
c
{:redirect_uri => callback_url}.merge(authorize_params)
client.auth_code.authorize_url({:redirect_uri => callback_url})
client.auth_code.authorize_url({:redirect_uri => callback_url}
authorize_params
client.auth_code.authorize_params
client.auth_code
client.auth_code.instance_variable_get('@client').authorize_url
client.auth_code.instance_variable_get('@client').redirection_params
client.auth_code.instance_variable_get('@client')
client.auth_code.send(:client)
client.auth_code.client
client.auth_code
l
l-
c
OmniAuth::Strategies::Ruesia
OmniAuth::Stratagies::Ruesia
OmniAuth::Stratagies
OmniAuth::Strategies.const_get(OmniAuth::Utils.camelize('ruesia').to_s, false)
l-
c
OmniAuth::Strategies.const_get(OmniAuth::Utils.camelize('ruesia').to_s, false)
OmniAuth::Strategies::Esia
OmniAuth::Strategies.const_get(OmniAuth::Utils.camelize('esia').to_s, false)
Omniauth::Stratagies::Ruesia
c
l
l-
c
Omniauth::Stratagies::Ruesia
Omniauth::Stratagies
Omniauth
c
OmniAuth::Utils.camelize('omniauth-ruesia', false).to_s
OmniAuth::Utils.camelize('omniauth-ruesia').to_s
OmniAuth::Utils.camelize('esia').to_s
OmniAuth::Utils.camelize(klass.to_s).to_s
OmniAuth::Strategies::OmniauthRuesia
OmniAuth::Strategies
OmniAuth::Strategies::Esia
l
l-
